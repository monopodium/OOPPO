// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package proxy_proto;

// The greeting service definition.
service proxyService {
  // Sends a greeting
  rpc checkalive (CheckaliveCMD) returns (RequestResult);
  rpc EncodeAndSetObject(ObjectAndPlacement) returns (SetReply);
  rpc decodeAndGetObject(ObjectAndPlacement) returns (GetReply);
  rpc mainRepair(mainRepairPlan) returns (mainRepairReply);
  rpc helpRepair(helpRepairPlan) returns (helpRepairReply);
}

message mainRepairPlan {
  bool one_shard_fail = 1;
  bool multi_az = 2;
  repeated string inner_az_help_shards_ip = 3;
  repeated int32 inner_az_help_shards_port = 4;
  repeated int32 inner_az_help_shards_idx = 5;
  int32 k = 6;
  int32 real_l = 7;
  int32 g = 8;
  int32 b = 9;
  repeated string new_location_ip = 10;
  repeated int32 new_location_port = 11;
  repeated int32 new_location_shard_idx = 12;
  int32 self_az_id = 13;
  repeated int32 help_azs_id = 14;
  bool if_partial_decoding = 15;
  int32 stripe_id = 16;
  int32 shard_size = 17;
  int32 encode_type = 18;
}

message helpRepairPlan {
  bool one_shard_fail = 1;
  bool multi_az = 2;
  repeated string inner_az_help_shards_ip = 3;
  repeated int32 inner_az_help_shards_port = 4;
  repeated int32 inner_az_help_shards_idx = 5;
  int32 k = 6;
  int32 real_l = 7;
  int32 g = 8;
  int32 b = 9;
  int32 self_az_id = 10;
  bool if_partial_decoding = 11;
  int32 stripe_id = 12;
  string main_proxy_ip = 13;
  int32 main_proxy_port = 14;
  int32 shard_size = 15;
  int32 encode_type = 16;
  int32 failed_shard_idx = 17;
}

message mainRepairReply {
  string result = 1;
}

message helpRepairReply {
  string result = 1;
}

// The request message containing the user's name.
message CheckaliveCMD {
  string name = 1;
}

// The response message containing the greetings
message RequestResult {
  bool message = 1;
}

message ObjectAndPlacement{
  bool bigobject = 1;
  string key = 2;
  int32 valuesizebyte = 3;
  int32 k = 4;
  int32 m = 5;
  int32 real_l = 6;
  repeated int32 stripe_ids = 7;
  repeated string datanodeip = 8;
  repeated int32 datanodeport = 9;
  int32 shard_size = 10;
  int32 tail_shard_size = 11;
  string clientip = 12;
  int32 clientport = 13;
  int32 encode_type = 14;
  int32 b = 15;
}
message SetReply {
  bool ifcommit = 1;
}
message GetReply {
  bool getsuccess = 1;
}
message UpdateDataproxyNotice{
  string key=1;
  int32 stripeid=2;

  repeated int32 receive_client_shard_idx=3;
  repeated int32 receive_client_shard_offset=4;
  repeated int32 receive_client_shard_length=5;
  repeated string data_nodeip=6;
  repeated int32 data_nodeport=7;

  repeated int32 local_parity_idx=8;
  repeated string local_parity_nodeip=9;
  repeated int32 local_parity_nodeport=10;

  repeated int32 global_parity_idx=11;//global parity in this AZ
  repeated string global_parity_nodeip=12;
  repeated int32 global_parity_nodeport=13;

  string collector_proxyip=14;
  int32 collector_proxyport=15;

  repeated int32 receive_cross_AZ_shard_idx=16;//may need to send data delta of AZ1 to AZ2
  repeated int32 receive_cross_AZ_offset_in_shard=17;
  repeated int32 receive_cross_AZ_length_in_shard=18;
}
message UpdateCollectorNotice{
  string key=1;
  int32 stripeid=2;
  repeated int32 receive_client_shard_idx=3;
  repeated int32 receive_client_shard_offset=4;
  repeated int32 receive_client_shard_length=5;

  repeated string data_proxyip=6;
  repeated int32 data_proxyport=7;
  repeated int32 idx_num_each_proxy=8;

  repeated int32 receive_proxy_shard_idx=9;//receive data delta from proxy
  repeated int32 receive_proxy_shard_offset=10;
  repeated int32 receive_proxy_shard_length=11;

  repeated int32 local_parity_idx=12;
  repeated string local_parity_nodeip=13;
  repeated int32 local_parity_nodeport=14;

  repeated int32 global_parity_idx=15;//global parity in this AZ
  repeated string global_parity_nodeip=16;
  repeated int32 global_parity_nodeport=17;


  repeated int32 cross_AZ_parityshard_idx=18;//send parity delta
  repeated string cross_AZ_parityshard_nodeip=19;
  repeated int32 cross_AZ_parityshard_nodeport=20;

  repeated string cross_AZ_proxyip=21;
  repeated int32 cross_AZ_proxyport=22;
  repeated int32 cross_AZ_num_each_AZ=23;

  repeated int32 cross_AZ_shard_idx=24;//may need to send data delta of AZ1 to AZ2
  repeated int32 cross_AZ_offset_in_shard=25;
  repeated int32 cross_AZ_length_in_shard=26;
}